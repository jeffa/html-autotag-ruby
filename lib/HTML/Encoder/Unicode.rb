module HTML

  class Encoder

    class Unicode    

      def self.unicode_mapping

            return {
                'OElig'    => 338.chr(Encoding::UTF_8),
                'oelig'    => 339.chr(Encoding::UTF_8),
                'Scaron'   => 352.chr(Encoding::UTF_8),
                'scaron'   => 353.chr(Encoding::UTF_8),
                'Yuml'     => 376.chr(Encoding::UTF_8),
                'fnof'     => 402.chr(Encoding::UTF_8),
                'circ'     => 710.chr(Encoding::UTF_8),
                'tilde'    => 732.chr(Encoding::UTF_8),
                'Alpha'    => 913.chr(Encoding::UTF_8),
                'Beta'     => 914.chr(Encoding::UTF_8),
                'Gamma'    => 915.chr(Encoding::UTF_8),
                'Delta'    => 916.chr(Encoding::UTF_8),
                'Epsilon'  => 917.chr(Encoding::UTF_8),
                'Zeta'     => 918.chr(Encoding::UTF_8),
                'Eta'      => 919.chr(Encoding::UTF_8),
                'Theta'    => 920.chr(Encoding::UTF_8),
                'Iota'     => 921.chr(Encoding::UTF_8),
                'Kappa'    => 922.chr(Encoding::UTF_8),
                'Lambda'   => 923.chr(Encoding::UTF_8),
                'Mu'       => 924.chr(Encoding::UTF_8),
                'Nu'       => 925.chr(Encoding::UTF_8),
                'Xi'       => 926.chr(Encoding::UTF_8),
                'Omicron'  => 927.chr(Encoding::UTF_8),
                'Pi'       => 928.chr(Encoding::UTF_8),
                'Rho'      => 929.chr(Encoding::UTF_8),
                'Sigma'    => 931.chr(Encoding::UTF_8),
                'Tau'      => 932.chr(Encoding::UTF_8),
                'Upsilon'  => 933.chr(Encoding::UTF_8),
                'Phi'      => 934.chr(Encoding::UTF_8),
                'Chi'      => 935.chr(Encoding::UTF_8),
                'Psi'      => 936.chr(Encoding::UTF_8),
                'Omega'    => 937.chr(Encoding::UTF_8),
                'alpha'    => 945.chr(Encoding::UTF_8),
                'beta'     => 946.chr(Encoding::UTF_8),
                'gamma'    => 947.chr(Encoding::UTF_8),
                'delta'    => 948.chr(Encoding::UTF_8),
                'epsilon'  => 949.chr(Encoding::UTF_8),
                'zeta'     => 950.chr(Encoding::UTF_8),
                'eta'      => 951.chr(Encoding::UTF_8),
                'theta'    => 952.chr(Encoding::UTF_8),
                'iota'     => 953.chr(Encoding::UTF_8),
                'kappa'    => 954.chr(Encoding::UTF_8),
                'lambda'   => 955.chr(Encoding::UTF_8),
                'mu'       => 956.chr(Encoding::UTF_8),
                'nu'       => 957.chr(Encoding::UTF_8),
                'xi'       => 958.chr(Encoding::UTF_8),
                'omicron'  => 959.chr(Encoding::UTF_8),
                'pi'       => 960.chr(Encoding::UTF_8),
                'rho'      => 961.chr(Encoding::UTF_8),
                'sigmaf'   => 962.chr(Encoding::UTF_8),
                'sigma'    => 963.chr(Encoding::UTF_8),
                'tau'      => 964.chr(Encoding::UTF_8),
                'upsilon'  => 965.chr(Encoding::UTF_8),
                'phi'      => 966.chr(Encoding::UTF_8),
                'chi'      => 967.chr(Encoding::UTF_8),
                'psi'      => 968.chr(Encoding::UTF_8),
                'omega'    => 969.chr(Encoding::UTF_8),
                'thetasym' => 977.chr(Encoding::UTF_8),
                'upsih'    => 978.chr(Encoding::UTF_8),
                'piv'      => 982.chr(Encoding::UTF_8),
                'ensp'     => 8194.chr(Encoding::UTF_8),
                'emsp'     => 8195.chr(Encoding::UTF_8),
                'thinsp'   => 8201.chr(Encoding::UTF_8),
                'zwnj'     => 8204.chr(Encoding::UTF_8),
                'zwj'      => 8205.chr(Encoding::UTF_8),
                'lrm'      => 8206.chr(Encoding::UTF_8),
                'rlm'      => 8207.chr(Encoding::UTF_8),
                'ndash'    => 8211.chr(Encoding::UTF_8),
                'mdash'    => 8212.chr(Encoding::UTF_8),
                'lsquo'    => 8216.chr(Encoding::UTF_8),
                'rsquo'    => 8217.chr(Encoding::UTF_8),
                'sbquo'    => 8218.chr(Encoding::UTF_8),
                'ldquo'    => 8220.chr(Encoding::UTF_8),
                'rdquo'    => 8221.chr(Encoding::UTF_8),
                'bdquo'    => 8222.chr(Encoding::UTF_8),
                'dagger'   => 8224.chr(Encoding::UTF_8),
                'Dagger'   => 8225.chr(Encoding::UTF_8),
                'bull'     => 8226.chr(Encoding::UTF_8),
                'hellip'   => 8230.chr(Encoding::UTF_8),
                'permil'   => 8240.chr(Encoding::UTF_8),
                'prime'    => 8242.chr(Encoding::UTF_8),
                'Prime'    => 8243.chr(Encoding::UTF_8),
                'lsaquo'   => 8249.chr(Encoding::UTF_8),
                'rsaquo'   => 8250.chr(Encoding::UTF_8),
                'oline'    => 8254.chr(Encoding::UTF_8),
                'frasl'    => 8260.chr(Encoding::UTF_8),
                'euro'     => 8364.chr(Encoding::UTF_8),
                'image'    => 8465.chr(Encoding::UTF_8),
                'weierp'   => 8472.chr(Encoding::UTF_8),
                'real'     => 8476.chr(Encoding::UTF_8),
                'trade'    => 8482.chr(Encoding::UTF_8),
                'alefsym'  => 8501.chr(Encoding::UTF_8),
                'larr'     => 8592.chr(Encoding::UTF_8),
                'uarr'     => 8593.chr(Encoding::UTF_8),
                'rarr'     => 8594.chr(Encoding::UTF_8),
                'darr'     => 8595.chr(Encoding::UTF_8),
                'harr'     => 8596.chr(Encoding::UTF_8),
                'crarr'    => 8629.chr(Encoding::UTF_8),
                'lArr'     => 8656.chr(Encoding::UTF_8),
                'uArr'     => 8657.chr(Encoding::UTF_8),
                'rArr'     => 8658.chr(Encoding::UTF_8),
                'dArr'     => 8659.chr(Encoding::UTF_8),
                'hArr'     => 8660.chr(Encoding::UTF_8),
                'forall'   => 8704.chr(Encoding::UTF_8),
                'part'     => 8706.chr(Encoding::UTF_8),
                'exist'    => 8707.chr(Encoding::UTF_8),
                'empty'    => 8709.chr(Encoding::UTF_8),
                'nabla'    => 8711.chr(Encoding::UTF_8),
                'isin'     => 8712.chr(Encoding::UTF_8),
                'notin'    => 8713.chr(Encoding::UTF_8),
                'ni'       => 8715.chr(Encoding::UTF_8),
                'prod'     => 8719.chr(Encoding::UTF_8),
                'sum'      => 8721.chr(Encoding::UTF_8),
                'minus'    => 8722.chr(Encoding::UTF_8),
                'lowast'   => 8727.chr(Encoding::UTF_8),
                'radic'    => 8730.chr(Encoding::UTF_8),
                'prop'     => 8733.chr(Encoding::UTF_8),
                'infin'    => 8734.chr(Encoding::UTF_8),
                'ang'      => 8736.chr(Encoding::UTF_8),
                'and'      => 8743.chr(Encoding::UTF_8),
                'or'       => 8744.chr(Encoding::UTF_8),
                'cap'      => 8745.chr(Encoding::UTF_8),
                'cup'      => 8746.chr(Encoding::UTF_8),
                'int'      => 8747.chr(Encoding::UTF_8),
                'there4'   => 8756.chr(Encoding::UTF_8),
                'sim'      => 8764.chr(Encoding::UTF_8),
                'cong'     => 8773.chr(Encoding::UTF_8),
                'asymp'    => 8776.chr(Encoding::UTF_8),
                'ne'       => 8800.chr(Encoding::UTF_8),
                'equiv'    => 8801.chr(Encoding::UTF_8),
                'le'       => 8804.chr(Encoding::UTF_8),
                'ge'       => 8805.chr(Encoding::UTF_8),
                'sub'      => 8834.chr(Encoding::UTF_8),
                'sup'      => 8835.chr(Encoding::UTF_8),
                'nsub'     => 8836.chr(Encoding::UTF_8),
                'sube'     => 8838.chr(Encoding::UTF_8),
                'supe'     => 8839.chr(Encoding::UTF_8),
                'oplus'    => 8853.chr(Encoding::UTF_8),
                'otimes'   => 8855.chr(Encoding::UTF_8),
                'perp'     => 8869.chr(Encoding::UTF_8),
                'sdot'     => 8901.chr(Encoding::UTF_8),
                'lceil'    => 8968.chr(Encoding::UTF_8),
                'rceil'    => 8969.chr(Encoding::UTF_8),
                'lfloor'   => 8970.chr(Encoding::UTF_8),
                'rfloor'   => 8971.chr(Encoding::UTF_8),
                'lang'     => 9001.chr(Encoding::UTF_8),
                'rang'     => 9002.chr(Encoding::UTF_8),
                'loz'      => 9674.chr(Encoding::UTF_8),
                'spades'   => 9824.chr(Encoding::UTF_8),
                'clubs'    => 9827.chr(Encoding::UTF_8),
                'hearts'   => 9829.chr(Encoding::UTF_8),
                'diams'    => 9830.chr(Encoding::UTF_8),
            }

      end

    end

  end

end

=begin rdoc

== AUTHOR

Jeff Anderson, <jeffa at cpan.org>

== LICENSE AND COPYRIGHT

Copyright 2015 Jeff Anderson. (See License.md shipped with distro)

=end
